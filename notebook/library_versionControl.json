{
	"name": "library_versionControl",
	"properties": {
		"folder": {
			"name": "libraries"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkSmallPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "32aa7270-22b0-4767-80cc-50770b01beb1"
			}
		},
		"metadata": {
			"saveOutput": false,
			"enableDebugMode": true,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/2f369958-80c5-4a50-bccd-42c3cd88f385/resourceGroups/prod-gruponc-ingestion-platform/providers/Microsoft.Synapse/workspaces/prod-gruponc-ingestion-platform-workspace/bigDataPools/sparkSmallPool",
				"name": "sparkSmallPool",
				"type": "Spark",
				"endpoint": "https://prod-gruponc-ingestion-platform-workspace.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkSmallPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Isso é basicamente pra evitarmos de gerar muitas variáveis e poluir o código. Fazendo dessa forma, temos um nome geral para as variaveis e chamamos apenas o nó (ou gravamos apenas no nó)\r\n",
					"# Esse aqui é pro dataframe final\r\n",
					"class HistoryZoneObject(object):\r\n",
					"    dataframe = \"\"\r\n",
					"    join = \"\"\r\n",
					"    new_entries = \"\"\r\n",
					"    obsolete_entries = \"\"\r\n",
					"    changed_entries_history = \"\"\r\n",
					"    changed_entries_new = \"\"\r\n",
					"    not_changed = \"\"\r\n",
					"    quality = \"\""
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Função para transformar uma lista de expressões numa expressão única.\r\n",
					"class version_control:\r\n",
					"    \r\n",
					"    def versionate(df_raw, df_trusted, key_columns = [], value_columns = []):\r\n",
					"        \r\n",
					"        # Inicia validando todas as condições utilizadas no versionamento\r\n",
					"        join_condition = [ F.col(f\"raw_{column}\") == F.col(f\"trusted_{column}\") for column in key_columns]\r\n",
					"        join_condition = basic_functions.list_to_expression(join_condition, \"and\")\r\n",
					"\r\n",
					"        inTrusted_condition = ~(F.col(f\"trusted_{key_columns[0]}\").isNull())\r\n",
					"\r\n",
					"        inRaw_condition = ~(F.col(f\"raw_{key_columns[0]}\").isNull())\r\n",
					"\r\n",
					"        isChanged_condition = [ (~ F.col(f'trusted_{column}').eqNullSafe( F.col(f'raw_{column}') ) ) for column in value_columns]\r\n",
					"        isChanged_condition = basic_functions.list_to_expression(isChanged_condition, \"or\")\r\n",
					"        \r\n",
					"        # Mostra as condições\r\n",
					"        # print\\\r\n",
					"        # (\r\n",
					"        #     f\"\"\"\r\n",
					"        #     Condição Join      : \\n{join_condition}\\n\r\n",
					"        #     Está em Ambos      : \\n{inTrustedInRaw_condition}\\n\r\n",
					"        #     Está na Trusted    : \\n{inTrustedNotRaw_condition}\\n\r\n",
					"        #     Não está na trusted: \\n{notTrustedInRaw_condition}\\n\r\n",
					"        #     Houve alteração    : \\n{isChanged_condition}\r\n",
					"        #     \"\"\"\r\n",
					"        # )\r\n",
					"        \r\n",
					"        # Declara o dataframe final, que contém todos os dataframes do versionamento\r\n",
					"        df_final = HistoryZoneObject()\r\n",
					"        \r\n",
					"        # Prepara os dataframes p/ join e tratamentos futuros\r\n",
					"        df_raw_tratado = \\\r\n",
					"            df_raw\\\r\n",
					"                .select( [ F.col(column).alias(\"raw_\"+column) for column in df_raw.columns ] )\r\n",
					"\r\n",
					"        df_trusted_tratado = \\\r\n",
					"            df_trusted\\\r\n",
					"                .select( [ F.col(column).alias(\"trusted_\"+column) for column in df_trusted.columns ])\r\n",
					"        \r\n",
					"        # Une e prepara p/ versionar\r\n",
					"        df_final.join = \\\r\n",
					"            df_trusted_tratado\\\r\n",
					"                .join\\\r\n",
					"                (\r\n",
					"                    df_raw_tratado,\r\n",
					"                    (\r\n",
					"                        join_condition\r\n",
					"                    ),\r\n",
					"                    how = \"full_outer\"\r\n",
					"                )\r\n",
					"        # Mostra o Join\r\n",
					"        # display(df_final.join)\r\n",
					"        \r\n",
					"        \r\n",
					"        # Começamos o versionamento!\r\n",
					"        \r\n",
					"        \r\n",
					"        # Novas Entradas\r\n",
					"        df_final.new_entries = \\\r\n",
					"            df_final.join\\\r\n",
					"                .filter\\\r\n",
					"                (\r\n",
					"                    ~inTrusted_condition & inRaw_condition\r\n",
					"                )\\\r\n",
					"                .select([c for c in df_final.join.columns if c.startswith(\"raw_\")])\\\r\n",
					"                .toDF(*(c.replace(\"raw_\", \"\") for c in df_raw_tratado.columns))\\\r\n",
					"                .withColumn(\"metadata_dt_start\",F.lit(today))\\\r\n",
					"                .withColumn(\"metadata_dt_end\",F.lit(None))\\\r\n",
					"                .withColumn(\"metadata_bool_active\",F.lit(True))\r\n",
					"        \r\n",
					"        # Mostra as novas entradas\r\n",
					"        # display(df_final.new_entries)\r\n",
					"        \r\n",
					"        # Entradas Alteradas (p/ histórico)\r\n",
					"        df_final.changed_entries_history = \\\r\n",
					"            df_final.join\\\r\n",
					"                .filter\\\r\n",
					"                ( \r\n",
					"                    inTrusted_condition & inRaw_condition &\r\n",
					"                    isChanged_condition\r\n",
					"                )\\\r\n",
					"                .select( [ column for column in df_final.join.columns if column.startswith(\"trusted_\") ] )\r\n",
					"\r\n",
					"        df_final.changed_entries_history = \\\r\n",
					"            df_final.changed_entries_history\\\r\n",
					"                .toDF(*(column.replace(\"trusted_\", \"\") for column in df_final.changed_entries_history.columns))\\\r\n",
					"                .withColumn(\"metadata_dt_end\",F.lit(today))\\\r\n",
					"                .withColumn(\"metadata_bool_active\",F.lit(False))\r\n",
					"\r\n",
					"        # Mostra as entradas alteradas (p/ histórico)\r\n",
					"        # display(df_final.changed_entries_history)\r\n",
					"        \r\n",
					"        # Entradas Alteradas (novas versões)\r\n",
					"        df_final.changed_entries_new = \\\r\n",
					"            df_final.join\\\r\n",
					"                .filter\\\r\n",
					"                    (\r\n",
					"                      inTrusted_condition & inRaw_condition &\r\n",
					"                      isChanged_condition\r\n",
					"                    )\\\r\n",
					"                .select( [ column for column in df_final.join.columns if column.startswith(\"raw_\") ] )\r\n",
					"        \r\n",
					"        df_final.changed_entries_new = \\\r\n",
					"            df_final.changed_entries_new\\\r\n",
					"                .toDF(*(column.replace(\"raw_\", \"\") for column in df_final.changed_entries_new.columns))\\\r\n",
					"                .withColumn(\"metadata_dt_start\",F.lit(today))\\\r\n",
					"                .withColumn(\"metadata_dt_end\",F.lit(None))\\\r\n",
					"                .withColumn(\"metadata_bool_active\",F.lit(True))\r\n",
					"\r\n",
					"        # Mostra as entradas alteradas (novas versões)\r\n",
					"        # display(df_final.changed_entries_new)\r\n",
					"        \r\n",
					"        # Entradas não alteradas\r\n",
					"        df_final.not_changed = \\\r\n",
					"            df_final.join\\\r\n",
					"                .filter\\\r\n",
					"                ( \r\n",
					"                    inTrusted_condition & inRaw_condition &\r\n",
					"                    ~isChanged_condition\r\n",
					"                )\\\r\n",
					"                .select( [ column for column in df_final.join.columns if column.startswith(\"trusted_\") ] )\r\n",
					"        \r\n",
					"        df_final.not_changed = \\\r\n",
					"            df_final.not_changed\\\r\n",
					"                .toDF(*(column.replace(\"trusted_\", \"\") for column in df_final.not_changed.columns))\r\n",
					"\r\n",
					"        # Mostra as entradas não alteradas\r\n",
					"        # display(df_final.not_changed)\r\n",
					"        \r\n",
					"        # Entradas Obsoletas\r\n",
					"        df_final.obsolete_entries = \\\r\n",
					"            df_final.join\\\r\n",
					"              .filter\\\r\n",
					"                (\r\n",
					"                   inTrusted_condition & ~inRaw_condition\r\n",
					"                )\\\r\n",
					"              .select( [ column for column in df_final.join.columns if column.startswith(\"trusted_\") ] )\\\r\n",
					"              .toDF(*(column.replace(\"trusted_\", \"\") for column in df_trusted_tratado.columns))\\\r\n",
					"              .withColumn(\"metadata_dt_end\",F.lit(today))\\\r\n",
					"              .withColumn(\"metadata_bool_active\",F.lit(False))\r\n",
					"\r\n",
					"        # Vamos mostrar as entradas obsoletas\r\n",
					"        # display(df_final.obsolete_entries)\r\n",
					"        \r\n",
					"        # Mostra todas as entradas\r\n",
					"        # print\\\r\n",
					"        # (\r\n",
					"        #     f\"\"\"\r\n",
					"        #     Novas: {df_final.new_entries.count()} \\n\r\n",
					"        #     Obsoletas: {df_final.obsolete_entries.count()} \\n\r\n",
					"        #     Alteradas: {df_final.changed_entries_history.count()} \\n\r\n",
					"        #     Não Alteradas {df_final.not_changed.count()}\r\n",
					"        #     \"\"\"\r\n",
					"        # )\r\n",
					"        \r\n",
					"        # Une todas as partes que tratamos acima\r\n",
					"\r\n",
					"        # print\\\r\n",
					"        # (\r\n",
					"        #     f\"\"\"\r\n",
					"        #     new: {df_final.new_entries.columns}\\n\\n\r\n",
					"        #     obsolete: {df_final.obsolete_entries.columns}\\n\\n\r\n",
					"        #     changed1: {df_final.changed_entries_history.columns}\\n\\n\r\n",
					"        #     changed2: {df_final.changed_entries_new.columns}\\n\\n\r\n",
					"        #     notchanged: {df_final.not_changed.columns}\r\n",
					"        #     \"\"\"\r\n",
					"        # )\r\n",
					"        \r\n",
					"        df_final.dataframe = \\\r\n",
					"            df_final.new_entries\\\r\n",
					"            .unionByName(df_final.obsolete_entries)\\\r\n",
					"            .unionByName(df_final.changed_entries_history)\\\r\n",
					"            .unionByName(df_final.changed_entries_new)\\\r\n",
					"            .unionByName(df_final.not_changed)\r\n",
					"        \r\n",
					"        \r\n",
					"        return df_final"
				],
				"execution_count": 55
			}
		]
	}
}